- name: Make sure snapd is installed
  apt:
    name:
      - snapd
    state: present
  become: yes
  when: ansible_distribution == 'Ubuntu'

- name: Make sure snapd is installed
  pacman:
    name:
      - snapd
    state: present
  become: yes
  when: ansible_distribution == 'Archlinux'

- name: Install microk8s
  become: yes
  snap:
    name: microk8s
    classic: yes
    channel: "{{ microk8s_version }}"

- name: Wait for microk8s to be ready
  become: yes
  command: microk8s.status --wait-ready
  changed_when: false
  register: mk8sstatusout

- name: Create kubectl alias
  become: yes
  command: "snap alias microk8s.kubectl kubectl"
  changed_when: false
  register: aliaskubectlout

- name: Create helm3 alias
  become: yes
  command: "snap alias microk8s.helm3 helm"
  changed_when: false
  register: aliashelmout
  when: microk8s_plugins.helm3

- name: Create custom certificates
  become: yes
  ansible.builtin.template:
    src: "{{ microk8s_csr_template }}"
    dest: /var/snap/microk8s/current/certs/csr.conf.template
    mode: 0644
  when: microk8s_csr_template is defined and microk8s_csr_template is file
  notify:
  - Refresh certs

- name: Create folder for microk8s certificates
  become: yes
  file:
    path: /usr/share/ca-certificates/extra
    state: directory
    mode: 0755

- name: Copy certificates
  become: yes
  copy:
    src: "{{ item }}"
    dest: /usr/share/ca-certificates/extra
    remote_src: yes
    force: yes
    mode: 0644
  with_fileglob:
    - /var/snap/microk8s/current/certs/*ca*.crt

- name: Trust certificates generated by microk8s
  become: yes
  command: "update-ca-certificates"
  register: command_result
  changed_when: "'0 added, 0 removed' not in command_result.stdout"

- name: Enable plugins
  become: yes
  loop: "{{ microk8s_plugins | dict2items }}"
  command: "microk8s.enable {{ item.key }}"
  loop_control: 
    label: "{{ item.key }}"
  register: command_result
  changed_when: "'Addon {{ item.key }} is already enabled' not in command_result.stdout"
  when: item.value and item.key != "registry"

- name: Disable plugins
  become: yes
  loop: "{{ microk8s_plugins | dict2items }}"
  command: "microk8s.disable {{ item.key }}"
  loop_control: 
    label: "{{ item.key }}"
  register: command_result
  changed_when: "'Addon {{ item.key }} is already disabled' not in command_result.stdout"
  when: not item.value and item.key != "registry"

- name: Enable registry
  become: yes
  command: "microk8s.enable registry:size={{ registry_size }}"
  register: command_result
  changed_when: "'Addon registry is already enabled' not in command_result.stdout"
  when: microk8s_plugins.registry

- name: Disable registry
  become: yes
  command: "microk8s.disable registry:size={{ registry_size }}"
  register: command_result
  changed_when: "'Addon registry is already disabled' not in command_result.stdout"
  when: not microk8s_plugins.registry

- name: Disable snap autoupdate
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED: microk8s Disable snap autoupdate"
    content: |
      127.0.0.1 api.snapcraft.io
  when: microk8s_disable_snap_autoupdate
